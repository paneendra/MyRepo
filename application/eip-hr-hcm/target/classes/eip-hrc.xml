<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:cloudhub="http://www.mulesoft.org/schema/mule/cloudhub" xmlns:tls="http://www.mulesoft.org/schema/mule/tls" xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:objectstore="http://www.mulesoft.org/schema/mule/objectstore" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:https="http://www.mulesoft.org/schema/mule/https"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.6.1"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mule-ss="http://www.mulesoft.org/schema/mule/spring-security"
    xmlns:ss="http://www.springframework.org/schema/security"
    xmlns:filters="http://www.mulesoft.org/schema/mule/filters" 
    xmlns:wd-hr="http://www.mulesoft.org/schema/mule/wd-hr"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/objectstore http://www.mulesoft.org/schema/mule/objectstore/current/mule-objectstore.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/https http://www.mulesoft.org/schema/mule/https/current/mule-https.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.mulesoft.org/schema/mule/spring-security http://www.mulesoft.org/schema/mule/spring-security/3.1/mule-spring-security.xsd
http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd
http://www.mulesoft.org/schema/mule/filters http://www.mulesoft.org/schema/mule/filters/current/mule-filters.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/wd-hr http://www.mulesoft.org/schema/mule/wd-hr/current/mule-wd-hr.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd
http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd
http://www.mulesoft.org/schema/mule/cloudhub http://www.mulesoft.org/schema/mule/cloudhub/current/mule-cloudhub.xsd">

    <wd-hr:config name="Workday_Human_Resource" hrUser="${workday.username}" hrPassword="${workday.password}" hrEndpoint="${workday.human.resources.url}" doc:name="Workday Human Resource">
        <wd-hr:connection-pooling-profile initialisationPolicy="INITIALISE_ONE" exhaustedAction="WHEN_EXHAUSTED_GROW"/>
    </wd-hr:config>

	<spring:beans> 
		<ss:user-service id="userService"> 
       		  <ss:user name="${ipaas.workday.username}" password="${ipaas.workday.password}" authorities="ROLE_HCM" />
		</ss:user-service> 
		<spring:bean id="AuthenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider"> 
			<spring:property name="userDetailsService" ref="userService"/> 
			<spring:property name="hideUserNotFoundExceptions" value="false"/> 
		</spring:bean> 
		<ss:authentication-manager alias="authenticationManager"> 
		<ss:authentication-provider ref="AuthenticationProvider" /> 
		</ss:authentication-manager>
        <spring:bean id="simpleMemoryObjectStore" class="org.mule.util.store.SimpleMemoryObjectStore"/> 
	</spring:beans> 
	
	<mule-ss:security-manager>
		<mule-ss:delegate-security-provider name="memory-dao" delegate-ref="authenticationManager" />
	</mule-ss:security-manager>
    <cloudhub:config name="Cloudhub" doc:name="Cloudhub"/>
    <catch-exception-strategy name="CatchExceptionStrategy">
        <set-payload value="#[(exception != null &amp;&amp; exception.muleMessage != null &amp;&amp; exception.muleMessage.payload != null &amp;&amp; exception.muleMessage.payload.responseBody != null) ? exception.muleMessage.payload.responseBody : payload]" doc:name="Exception Response Body"/>
        <object-to-string-transformer doc:name="Object to String"/>
        <tracking:custom-event event-name="Exception Info" doc:name="Exception Info">
            <tracking:meta-data key="exception-info" value="#[exception]"/>
        </tracking:custom-event>
        <set-property propertyName="http.status" value="400" doc:name="Http Status 400"/>
        <flow-ref name="eip-hrc-logger" doc:name="eip-hrc-logger"/>
    </catch-exception-strategy>
    <flow name="eip-hrc-security"  doc:description="Required White List and IP Address Flow Variables to be set. " initialState="started" processingStrategy="synchronous">
        <set-session-variable variableName="securityInboundEndpoint" value="#[message.inboundProperties.'http.request.path']" doc:name="Inbound Endpoint"/>
        <set-session-variable variableName="securityInboundProperties" value="#[message.inboundProperties.toString()]" doc:name="Inbound Message Properties"/>
        <set-session-variable variableName="securityStartDateTime" value="#[server.dateTime]" doc:name="Start DateTime"/>
        <set-session-variable variableName="securityHost" value="#[message.inboundProperties.Host]" doc:name="Host"/>
        <set-session-variable variableName="securityQueryString" value="#[message.inboundProperties.'http.query.string']" doc:name="Query String"/>
        <set-session-variable variableName="debugFlag" value="#[app.registry['debug']]" doc:name="Debug Flag"/>
        <set-session-variable variableName="securityIpAddress" value="#[(sessionVars.debugFlag == true) ? '.' : message.inboundProperties['X-Real-IP']]" doc:name="IP Address"/>
        <choice doc:name="Check IP Address">
            <when expression="#[sessionVars.debugFlag == true]">
                <logger message="Debug Mode " level="WARN" doc:name="Log Debug"/>
            </when>
            <when expression="#[(sessionVars.securityIpAddress != empty) &amp;&amp; (regex('.*' + sessionVars.securityIpAddress + '.*', sessionVars.whiteList) != null)]">
                <set-session-variable variableName="securityValidIp" value="#[true]" doc:name="Valid IP"/>
            </when>
            <when expression="#[(sessionVars.classCAddress == true) &amp;&amp; (sessionVars.securityIpAddress != empty) &amp;&amp; (regex('.*' + sessionVars.securityIpAddress.substring(0, sessionVars.securityIpAddress.lastIndexOf('.')) + '.*', sessionVars.whiteList) != null)]">
                <set-session-variable variableName="securityValidIp" value="#[true]" doc:name="Valid Class C IP"/>
            </when>
            <otherwise>
                <set-property propertyName="http.status" value="403" doc:name="HTTP Status 403"/>
                <flow-ref name="eip-hrc-logMessage" doc:name="eip-hrc-logMessage"/>
                <expression-filter expression="#[false]" doc:name="Stop Message"/>
            </otherwise>
        </choice>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message="#['EIP-HRC-SECURITY EXCEPTION ' + exception.toString()]" level="ERROR" category="EIP-HRC" doc:name="Log Exception"/>
            <cloudhub:create-notification config-ref="Cloudhub" message="EIP-HRC-SECURITY Exception" priority="ERROR" doc:name="Cloudhub"/>
            <expression-filter expression="#[false]" doc:name="Stop Message"/>
        </catch-exception-strategy>
    </flow>
    <flow name="eip-hrc-logger"  initialState="started" processingStrategy="synchronous">
        <set-session-variable variableName="securityOutboundEndpoint" value="#[message.outboundProperties.'http.request.path' == null ? &quot;&quot; : message.outboundProperties.'http.request.path']" doc:name="Outbound Endpoint"/>
        <set-session-variable variableName="loggerHttpStatusInbound" value="#[(message.inboundProperties['http.status'] != null) ? message.inboundProperties['http.status'] : '0']" doc:name="HTTP Status Inbound"/>
        <set-session-variable variableName="loggerHttpStatusOutbound" value="#[(message.outboundProperties.'http.status' != null) ? message.outboundProperties.'http.status' : '0']" doc:name="HTTP Status Outbound"/>
        <set-session-variable variableName="loggerResponseTime" value="#[(sessionVars.securityStartDateTime != null) ? server.dateTime.toDate().getTime() - sessionVars.securityStartDateTime.toDate().getTime() : 0]" doc:name="Response Time"/>
        <choice doc:name="Check HTTP Status">
            <when expression="#[sessionVars.loggerHttpStatusOutbound &gt; 0]">
                <set-session-variable variableName="httpStatus" value="#[sessionVars.loggerHttpStatusOutbound]" doc:name="HTTP Status Outbound"/>
            </when>
            <when expression="#[sessionVars.loggerHttpStatusInbound &gt; 0]">
                <set-session-variable variableName="httpStatus" value="#[sessionVars.loggerHttpStatusInbound]" doc:name="HTTP Status Inbound"/>
            </when>
            <otherwise>
                <set-session-variable variableName="httpStatus" value="200" doc:name="HTTP Status 200"/>
            </otherwise>
        </choice>
        <set-session-variable variableName="loggerSize" value="#[(message.inboundProperties.'http.headers' == null || message.inboundProperties.'http.headers'.get('Content-Length') == null)  ? 0 : message.inboundProperties.'http.headers'.get('Content-Length')]" doc:name="Request Size"/>
        <set-session-variable variableName="securityIpAddress" value="#[(sessionVars.debugFlag == true) ? '.' : message.inboundProperties['X-Real-IP']]" doc:name="IP Address"/>
        <flow-ref name="eip-hrc-logMessage" doc:name="eip-hrc-logMessage"/>
        <catch-exception-strategy doc:name="CatchExceptionStrategy2">
            <logger message="HRC Logger Exception: #[sessionVars] #[app] #[message]" level="ERROR" doc:name="Log Exception"/>
            <tracking:custom-event event-name="HRC Logger Exception" doc:name="HRC Logger Exception">
                <tracking:meta-data key="sessionVars" value="#[sessionVars]"/>
                <tracking:meta-data key="app" value="#[app]"/>
                <tracking:meta-data key="message" value="#[message]"/>
                <tracking:meta-data key="exception" value="#[exception]"/>
                <tracking:meta-data key="payload" value="#[payload]"/>
            </tracking:custom-event>
            <cloudhub:create-notification config-ref="Cloudhub" message="EIP-HRC-Logger Failure" priority="ERROR" doc:name="Cloudhub Notification">
                <cloudhub:custom-properties ref="#[payload]"/>
            </cloudhub:create-notification>
        </catch-exception-strategy>
    </flow>
    <sub-flow name="eip-hrc-logMessage" >
        <component class="com.intel.mulesoft.processor.CustomMessageProcessor" doc:name="Username"/>
        <set-property propertyName="http.status" value="#[sessionVars.httpStatus]" doc:name="Http Return Status"/>
        <object-to-string-transformer doc:name="Object to String"/>
        <set-session-variable variableName="logEntry" value="{&quot;LogEntry&quot; : {&quot;User&quot;: &quot;#[flowVars.securityUserName]&quot;, &quot;Caller IP Address&quot; : &quot;#[sessionVars.securityIpAddress]&quot;, &quot;Inbound Endpoint&quot;: &quot;#[sessionVars.securityInboundEndpoint]&quot;, &quot;Outbound Endpoint&quot;: &quot;#[sessionVars.securityOutboundEndpoint]&quot;,  &quot;Query String&quot;: &quot;#[sessionVars.securityQueryString]&quot;, &quot;Size&quot;: #[sessionVars.loggerSize], &quot;HttpStatus&quot;: #[sessionVars.httpStatus], &quot;Host&quot; : &quot;#[sessionVars.securityHost]&quot;, &quot;Date Time&quot; : &quot;#[sessionVars.securityStartDateTime]&quot;, &quot;Response Time&quot;: #[sessionVars.loggerResponseTime], &quot;Size&quot; : &quot;#[sessionVars.loggerSize]&quot;, &quot;Target&quot; : &quot;#[message.inboundProperties.'http.request']&quot;, &quot;Inbound Message&quot; : &quot;#[sessionVars.securityInboundProperties]&quot;, &quot;Exception&quot;: &quot;#[(exception == null)? &quot;&quot; : exception.toString().replaceAll(['\r\n\&quot;'], ' ')]&quot;, &quot;Current Message&quot; : &quot;#[message.toString().replaceAll(['\r\n\&quot;'], ' ')]&quot; } }" doc:name="Log Entry"/>
        <tracking:custom-event event-name="HRC Logger" doc:name="HRC Logger">
            <tracking:meta-data key="flowVars.securityUserName" value="#[flowVars.securityUserName]"/>
            <tracking:meta-data key="sessionVars.httpStatus" value="#[sessionVars.httpStatus]"/>
        </tracking:custom-event>
        <choice doc:name="HTTP Status Successful">
            <when expression="#[sessionVars.httpStatus &gt;= 200 &amp;&amp; sessionVars.httpStatus &lt; 300]">
                <logger message="#[sessionVars.logEntry]" level="INFO" doc:name="Yes, Log Info"/>
            </when>
            <otherwise>
                <logger message="#[sessionVars.logEntry]" level="ERROR" doc:name="No, Log Error"/>
                <set-payload value="#[((payload == empty || payload == &quot;{NullPayload}&quot;) &amp;&amp; exception != null) ? exception.toString() : payload]" doc:name="Set Error Message"/>
            </otherwise>
        </choice>
    </sub-flow>
    <sub-flow name="eip-hrc-intel-outgoing" >
        <set-session-variable variableName="whiteList" value="#[app.registry['intel.whitelist']]" doc:name="Intel IP White List"/>
        <set-session-variable variableName="classCAddress" value="#[true]" doc:name="Class C Address True"/>
        <flow-ref name="eip-hrc-security" doc:name="eip-hrc-security"/>
    </sub-flow>


</mule>

    			